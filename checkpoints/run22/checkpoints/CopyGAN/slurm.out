starting training run 22
Setting up a new session...
Traceback (most recent call last):
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/urllib3/connection.py", line 159, in _new_conn
    conn = connection.create_connection(
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/urllib3/util/connection.py", line 84, in create_connection
    raise err
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/urllib3/util/connection.py", line 74, in create_connection
    sock.connect(sa)
ConnectionRefusedError: [Errno 111] Connection refused

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/urllib3/connectionpool.py", line 670, in urlopen
    httplib_response = self._make_request(
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/urllib3/connectionpool.py", line 392, in _make_request
    conn.request(method, url, **httplib_request_kw)
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/http/client.py", line 1230, in request
    self._send_request(method, url, body, headers, encode_chunked)
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/http/client.py", line 1276, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/http/client.py", line 1225, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/http/client.py", line 1004, in _send_output
    self.send(msg)
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/http/client.py", line 944, in send
    self.connect()
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/urllib3/connection.py", line 187, in connect
    conn = self._new_conn()
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/urllib3/connection.py", line 171, in _new_conn
    raise NewConnectionError(
urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x153961e16880>: Failed to establish a new connection: [Errno 111] Connection refused

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/requests/adapters.py", line 439, in send
    resp = conn.urlopen(
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/urllib3/connectionpool.py", line 724, in urlopen
    retries = retries.increment(
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/urllib3/util/retry.py", line 439, in increment
    raise MaxRetryError(_pool, url, error or ResponseError(cause))
urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8097): Max retries exceeded with url: /env/main (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x153961e16880>: Failed to establish a new connection: [Errno 111] Connection refused'))

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/tlotze/.local/lib/python3.8/site-packages/visdom/__init__.py", line 708, in _send
    return self._handle_post(
  File "/home/tlotze/.local/lib/python3.8/site-packages/visdom/__init__.py", line 677, in _handle_post
    r = self.session.post(url, data=data)
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/requests/sessions.py", line 578, in post
    return self.request('POST', url, data=data, json=json, **kwargs)
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/requests/sessions.py", line 530, in request
    resp = self.send(prep, **send_kwargs)
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/requests/sessions.py", line 643, in send
    r = adapter.send(request, **kwargs)
  File "/sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/lib/python3.8/site-packages/requests/adapters.py", line 516, in send
    raise ConnectionError(e, request=request)
requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8097): Max retries exceeded with url: /env/main (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x153961e16880>: Failed to establish a new connection: [Errno 111] Connection refused'))
[Errno 111] Connection refused
----------------- Options ---------------
              D_headstart: 10000                         	[default: 80000]
              D_threshold: 0.6                           
       accumulation_steps: 1                             	[default: 4]
               batch_size: 64                            
                    beta1: 0.5                           
                    beta2: 0.999                         
           border_zeroing: True                          
          checkpoints_dir: /scratch/checkpoints          	[default: ./checkpoints]
        confidence_weight: 0.0                           
           continue_train: False                         
                crop_size: 256                           	[default: 64]
                 dataroot: /scratch/datasets/CLEVR_colorized/images	[default: datasets]
             dataset_mode: double                        
                direction: None                          
              display_env: main                          
             display_freq: 100                           
               display_id: 1                             
            display_ncols: 4                             
             display_port: 8097                          
           display_server: http://localhost              
          display_winsize: 256                           
                    epoch: latest                        
              epoch_count: 1                             
                 gan_mode: lsgan                         
                  gpu_ids: 0                             
                init_gain: 0.02                          
                init_type: normal                        
                 input_nc: 3                             
                  isTrain: True                          	[default: None]
          keep_last_batch: False                         
               lambda_aux: 0.2                           
                load_iter: 0                             	[default: 0]
                load_size: 265                           	[default: 70]
                       lr: 0.0001                        
           lr_decay_iters: 50                            
                lr_policy: step                          
         max_dataset_size: inf                           
                    model: copypasteGAN                  	[default: cycle_gan]
                 n_epochs: 2                             	[default: 1]
           n_epochs_decay: 1                             	[default: 3]
               n_layers_D: 3                             
                     name: CopyGAN                       
                      ndf: 64                            
                     netD: copy                          
                     netG: copy                          
                      ngf: 64                            
               no_dropout: False                         
                  no_flip: True                          
                  no_html: False                         
                     norm: instance                      
           nr_obj_classes: 1                             
              num_threads: 4                             
                output_nc: 3                             
                  patch_D: True                          	[default: False]
                    phase: train                         
                pool_size: 50                            
               preprocess: resize_and_crop               
               print_freq: 20                            
              real_target: 1.0                           
             save_by_iter: False                         
          save_epoch_freq: 10                            
         save_latest_freq: 5000                          
                     seed: 42                            
           serial_batches: False                         
               sigma_blur: 1.0                           
                   suffix:                               
         update_html_freq: 100                           
           val_batch_size: 128                           
                 val_freq: 50                            
                  verbose: True                          	[default: False]
----------------- End -------------------
----------------- Options ---------------
              D_headstart: 10000                         	[default: 80000]
              D_threshold: 0.6                           
       accumulation_steps: 1                             	[default: 4]
               batch_size: 64                            
                    beta1: 0.5                           
                    beta2: 0.999                         
           border_zeroing: True                          
          checkpoints_dir: /scratch/checkpoints          	[default: ./checkpoints]
        confidence_weight: 0.0                           
           continue_train: False                         
                crop_size: 256                           	[default: 64]
                 dataroot: /scratch/datasets/CLEVR_colorized/images	[default: datasets]
             dataset_mode: double                        
                direction: None                          
              display_env: main                          
             display_freq: 100                           
               display_id: 1                             
            display_ncols: 4                             
             display_port: 8097                          
           display_server: http://localhost              
          display_winsize: 256                           
                    epoch: latest                        
              epoch_count: 1                             
                 gan_mode: lsgan                         
                  gpu_ids: 0                             
                init_gain: 0.02                          
                init_type: normal                        
                 input_nc: 3                             
                  isTrain: True                          	[default: None]
          keep_last_batch: False                         
               lambda_aux: 0.2                           
                load_iter: 0                             	[default: 0]
                load_size: 265                           	[default: 70]
                       lr: 0.0001                        
           lr_decay_iters: 50                            
                lr_policy: step                          
         max_dataset_size: inf                           
                    model: copypasteGAN                  	[default: cycle_gan]
                 n_epochs: 2                             	[default: 1]
           n_epochs_decay: 1                             	[default: 3]
               n_layers_D: 3                             
                     name: CopyGAN                       
                      ndf: 64                            
                     netD: copy                          
                     netG: copy                          
                      ngf: 64                            
               no_dropout: False                         
                  no_flip: True                          
                  no_html: False                         
                     norm: instance                      
           nr_obj_classes: 1                             
              num_threads: 4                             
                output_nc: 3                             
                  patch_D: True                          	[default: False]
                    phase: train                         
                pool_size: 50                            
               preprocess: resize_and_crop               
               print_freq: 20                            
              real_target: 1.0                           
             save_by_iter: False                         
          save_epoch_freq: 10                            
         save_latest_freq: 5000                          
                     seed: 42                            
           serial_batches: False                         
               sigma_blur: 1.0                           
                   suffix:                               
         update_html_freq: 100                           
           val_batch_size: 128                           
                 val_freq: 50                            
                  verbose: True                          	[default: False]
----------------- End -------------------
dataset [DoubleDataset] was created
dataset [DoubleDataset] was created
The number of training images = 15000
The number of epochs to run = 3
initialize network with normal
initialize network with normal
model [CopyPasteGANModel] was created
---------- Networks initialized -------------
DataParallel(
  (module): CopyUNet(
    (downscale): Sequential(
      (0): EncoderBlock(
        (model): Sequential(
          (0): Conv2d(3, 3, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): InstanceNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): EncoderBlock(
        (model): Sequential(
          (0): Conv2d(3, 3, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): InstanceNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (upscale): Sequential(
      (0): DecoderBlock(
        (model): Sequential(
          (0): Upsample(scale_factor=2.0, mode=bilinear)
          (1): Conv2d(1, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): InstanceNorm2d(1, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): DecoderBlock(
        (model): Sequential(
          (0): Upsample(scale_factor=2.0, mode=bilinear)
          (1): Conv2d(1, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): InstanceNorm2d(1, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (enc1): EncoderBlock(
      (model): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (enc2): EncoderBlock(
      (model): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (enc3): EncoderBlock(
      (model): Sequential(
        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (enc4): EncoderBlock(
      (model): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (dec4): DecoderBlock(
      (model): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (dec3): DecoderBlock(
      (model): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (2): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (dec2): DecoderBlock(
      (model): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (dec1): DecoderBlock(
      (model): Sequential(
        (0): Conv2d(128, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (sigmoid): Sigmoid()
  )
)
[Network G] Total number of parameters : 3.469 M
DataParallel(
  (module): CopyUNet(
    (blur_filter): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=3, bias=False, padding_mode=replicate)
    (downscale): Sequential(
      (0): EncoderBlock(
        (model): Sequential(
          (0): Conv2d(3, 3, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): InstanceNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): EncoderBlock(
        (model): Sequential(
          (0): Conv2d(3, 3, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (1): InstanceNorm2d(3, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (2): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (upscale): Sequential(
      (0): DecoderBlock(
        (model): Sequential(
          (0): Upsample(scale_factor=2.0, mode=bilinear)
          (1): Conv2d(1, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): InstanceNorm2d(1, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
      (1): DecoderBlock(
        (model): Sequential(
          (0): Upsample(scale_factor=2.0, mode=bilinear)
          (1): Conv2d(1, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): InstanceNorm2d(1, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (enc1): EncoderBlock(
      (model): Sequential(
        (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (enc2): EncoderBlock(
      (model): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (enc3): EncoderBlock(
      (model): Sequential(
        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (enc4): EncoderBlock(
      (model): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (2): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (dec4): DecoderBlock(
      (model): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (2): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (dec3): DecoderBlock(
      (model): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(512, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (2): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (dec2): DecoderBlock(
      (model): Sequential(
        (0): Upsample(scale_factor=2.0, mode=bilinear)
        (1): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (2): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (dec1): DecoderBlock(
      (model): Sequential(
        (0): Conv2d(128, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (sigmoid): Sigmoid()
    (avg): Sequential(
      (0): Conv2d(512, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Sigmoid()
    )
  )
)
[Network D] Total number of parameters : 3.473 M
-----------------------------------------------
Exception in user code:
------------------------------------------------------------
checking connection: False


Could not connect to Visdom server. 
 Trying to start a server....
Command: /sw/arch/Debian10/EB_production/2020/software/Python/3.8.2-GCCcore-9.3.0/bin/python -m visdom.server -p 8097 &>/dev/null &
check connection after creating new server: False
create web directory /scratch/checkpoints/CopyGAN/web...
running validation set (B:1)
validation accuracies:
                gf: 0.69
                real: 0.31
                fake: 0.69

(epoch: 1, batches: 20, time: 0.031, data: 0.022) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.641 loss_D_fake: 0.788 loss_D_gr_fake: 0.583 loss_AUX: 0.507 loss_D: 2.520 acc_real: 0.311 acc_fake: 0.692 acc_grfake: 0.690 
(epoch: 1, batches: 40, time: 0.035, data: 0.025) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.486 loss_D_fake: 0.900 loss_D_gr_fake: 0.502 loss_AUX: 0.504 loss_D: 2.392 acc_real: 0.311 acc_fake: 0.692 acc_grfake: 0.690 
running validation set (B:51)
validation accuracies:
                gf: 0.81
                real: 0.79
                fake: 0.39

(epoch: 1, batches: 60, time: 0.031, data: 0.025) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.518 loss_D_fake: 0.742 loss_D_gr_fake: 0.267 loss_AUX: 0.503 loss_D: 2.030 acc_real: 0.798 acc_fake: 0.366 acc_grfake: 0.832 
(epoch: 1, batches: 80, time: 0.028, data: 0.025) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.396 loss_D_fake: 1.071 loss_D_gr_fake: 0.457 loss_AUX: 0.505 loss_D: 2.430 acc_real: 0.798 acc_fake: 0.366 acc_grfake: 0.832 
(epoch: 1, batches: 100, time: 0.051, data: 0.022) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.274 loss_D_fake: 1.102 loss_D_gr_fake: 0.390 loss_AUX: 0.504 loss_D: 2.270 acc_real: 0.798 acc_fake: 0.366 acc_grfake: 0.832 
running validation set (B:101)
validation accuracies:
                gf: 0.83
                real: 0.91
                fake: 0.40

(epoch: 1, batches: 120, time: 0.038, data: 0.022) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.349 loss_D_fake: 1.038 loss_D_gr_fake: 0.264 loss_AUX: 0.502 loss_D: 2.153 acc_real: 0.870 acc_fake: 0.403 acc_grfake: 0.864 
(epoch: 1, batches: 140, time: 0.028, data: 0.024) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.265 loss_D_fake: 1.281 loss_D_gr_fake: 0.476 loss_AUX: 0.504 loss_D: 2.526 acc_real: 0.870 acc_fake: 0.403 acc_grfake: 0.864 
running validation set (B:151)
validation accuracies:
                gf: 0.85
                real: 0.95
                fake: 0.43

(epoch: 1, batches: 160, time: 0.032, data: 0.022) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.277 loss_D_fake: 1.057 loss_D_gr_fake: 0.229 loss_AUX: 0.503 loss_D: 2.066 acc_real: 0.971 acc_fake: 0.497 acc_grfake: 0.880 
(epoch: 1, batches: 180, time: 0.021, data: 0.024) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.216 loss_D_fake: 0.882 loss_D_gr_fake: 0.268 loss_AUX: 0.503 loss_D: 1.869 acc_real: 0.971 acc_fake: 0.497 acc_grfake: 0.880 
(epoch: 1, batches: 200, time: 0.052, data: 0.023) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.282 loss_D_fake: 0.803 loss_D_gr_fake: 0.248 loss_AUX: 0.503 loss_D: 1.836 acc_real: 0.971 acc_fake: 0.497 acc_grfake: 0.880 
running validation set (B:201)
validation accuracies:
                gf: 0.88
                real: 0.95
                fake: 0.52

(epoch: 1, batches: 220, time: 0.036, data: 0.023) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.150 loss_D_fake: 1.050 loss_D_gr_fake: 0.338 loss_AUX: 0.503 loss_D: 2.041 acc_real: 0.943 acc_fake: 0.508 acc_grfake: 0.888 
learning rate 0.0001000 -> 0.0001000
End of epoch 1 / 3 	 Time Taken: 1467 sec
/home/tlotze/.local/lib/python3.8/site-packages/torch/optim/lr_scheduler.py:131: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "
running validation set (B:251)
validation accuracies:
                gf: 0.81
                real: 0.98
                fake: 0.36

(epoch: 2, batches: 20, time: 0.025, data: 0.025) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.299 loss_D_fake: 0.724 loss_D_gr_fake: 0.292 loss_AUX: 0.503 loss_D: 1.817 acc_real: 0.954 acc_fake: 0.476 acc_grfake: 0.830 
(epoch: 2, batches: 40, time: 0.031, data: 0.024) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.296 loss_D_fake: 0.709 loss_D_gr_fake: 0.171 loss_AUX: 0.501 loss_D: 1.677 acc_real: 0.954 acc_fake: 0.476 acc_grfake: 0.830 
(epoch: 2, batches: 60, time: 0.038, data: 0.022) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.227 loss_D_fake: 1.228 loss_D_gr_fake: 0.378 loss_AUX: 0.505 loss_D: 2.338 acc_real: 0.954 acc_fake: 0.476 acc_grfake: 0.830 
running validation set (B:301)
validation accuracies:
                gf: 0.88
                real: 0.96
                fake: 0.53

(epoch: 2, batches: 80, time: 0.034, data: 0.022) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.127 loss_D_fake: 1.135 loss_D_gr_fake: 0.411 loss_AUX: 0.503 loss_D: 2.176 acc_real: 0.965 acc_fake: 0.542 acc_grfake: 0.896 
(epoch: 2, batches: 100, time: 0.031, data: 0.024) loss_G_comp: 0.000 loss_G_anti_sc: 0.000 loss_G: 0.000 loss_D_real: 0.237 loss_D_fake: 0.950 loss_D_gr_fake: 0.249 loss_AUX: 0.502 loss_D: 1.938 acc_real: 0.965 acc_fake: 0.542 acc_grfake: 0.896 
running validation set (B:351)
validation accuracies:
                gf: 0.92
                real: 0.87
                fake: 0.73

(epoch: 2, batches: 120, time: 0.031, data: 0.021) loss_G_comp: 0.960 loss_G_anti_sc: 1.162 loss_G: 2.122 loss_D_real: 0.142 loss_D_fake: 1.324 loss_D_gr_fake: 0.351 loss_AUX: 0.500 loss_D: 2.317 acc_real: 0.866 acc_fake: 0.719 acc_grfake: 0.939 
(epoch: 2, batches: 140, time: 0.033, data: 0.023) loss_G_comp: 0.589 loss_G_anti_sc: 0.557 loss_G: 1.147 loss_D_real: 0.368 loss_D_fake: 1.132 loss_D_gr_fake: 0.251 loss_AUX: 0.503 loss_D: 2.253 acc_real: 0.866 acc_fake: 0.719 acc_grfake: 0.939 
(epoch: 2, batches: 160, time: 0.036, data: 0.024) loss_G_comp: 0.718 loss_G_anti_sc: 0.382 loss_G: 1.100 loss_D_real: 0.225 loss_D_fake: 1.171 loss_D_gr_fake: 0.330 loss_AUX: 0.504 loss_D: 2.230 acc_real: 0.866 acc_fake: 0.719 acc_grfake: 0.939 
running validation set (B:401)
validation accuracies:
                gf: 0.89
                real: 0.87
                fake: 0.33

(epoch: 2, batches: 180, time: 0.035, data: 0.024) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.318 loss_D_fake: 1.241 loss_D_gr_fake: 0.144 loss_AUX: 0.502 loss_D: 2.205 acc_real: 0.907 acc_fake: 0.283 acc_grfake: 0.885 
(epoch: 2, batches: 200, time: 0.037, data: 0.023) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.227 loss_D_fake: 1.492 loss_D_gr_fake: 0.271 loss_AUX: 0.500 loss_D: 2.490 acc_real: 0.907 acc_fake: 0.283 acc_grfake: 0.885 
running validation set (B:451)
validation accuracies:
                gf: 0.90
                real: 0.94
                fake: 0.31

(epoch: 2, batches: 220, time: 0.021, data: 0.025) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.263 loss_D_fake: 1.203 loss_D_gr_fake: 0.264 loss_AUX: 0.501 loss_D: 2.231 acc_real: 0.933 acc_fake: 0.294 acc_grfake: 0.908 
learning rate 0.0001000 -> 0.0000800
End of epoch 2 / 3 	 Time Taken: 1419 sec
(epoch: 3, batches: 20, time: 0.035, data: 0.030) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.195 loss_D_fake: 1.209 loss_D_gr_fake: 0.211 loss_AUX: 0.501 loss_D: 2.116 acc_real: 0.933 acc_fake: 0.294 acc_grfake: 0.908 
running validation set (B:501)
validation accuracies:
                gf: 0.87
                real: 0.98
                fake: 0.23

(epoch: 3, batches: 40, time: 0.035, data: 0.023) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.145 loss_D_fake: 1.499 loss_D_gr_fake: 0.396 loss_AUX: 0.500 loss_D: 2.540 acc_real: 0.984 acc_fake: 0.188 acc_grfake: 0.890 
(epoch: 3, batches: 60, time: 0.033, data: 0.024) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.132 loss_D_fake: 1.538 loss_D_gr_fake: 0.314 loss_AUX: 0.501 loss_D: 2.485 acc_real: 0.984 acc_fake: 0.188 acc_grfake: 0.890 
(epoch: 3, batches: 80, time: 0.043, data: 0.025) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.176 loss_D_fake: 1.306 loss_D_gr_fake: 0.304 loss_AUX: 0.500 loss_D: 2.286 acc_real: 0.984 acc_fake: 0.188 acc_grfake: 0.890 
running validation set (B:551)
validation accuracies:
                gf: 0.90
                real: 0.95
                fake: 0.33

(epoch: 3, batches: 100, time: 0.039, data: 0.023) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.142 loss_D_fake: 1.484 loss_D_gr_fake: 0.213 loss_AUX: 0.500 loss_D: 2.339 acc_real: 0.954 acc_fake: 0.281 acc_grfake: 0.855 
(epoch: 3, batches: 120, time: 0.038, data: 0.025) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.157 loss_D_fake: 1.373 loss_D_gr_fake: 0.352 loss_AUX: 0.501 loss_D: 2.383 acc_real: 0.954 acc_fake: 0.281 acc_grfake: 0.855 
running validation set (B:601)
validation accuracies:
                gf: 0.88
                real: 0.98
                fake: 0.27

(epoch: 3, batches: 140, time: 0.014, data: 0.024) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.148 loss_D_fake: 1.633 loss_D_gr_fake: 0.362 loss_AUX: 0.500 loss_D: 2.643 acc_real: 0.987 acc_fake: 0.208 acc_grfake: 0.867 
saving the latest model (epoch 3, total_iters 40000)
(epoch: 3, batches: 160, time: 0.034, data: 0.019) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.127 loss_D_fake: 1.474 loss_D_gr_fake: 0.222 loss_AUX: 0.500 loss_D: 2.323 acc_real: 0.987 acc_fake: 0.208 acc_grfake: 0.867 
(epoch: 3, batches: 180, time: 0.035, data: 0.023) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.172 loss_D_fake: 1.313 loss_D_gr_fake: 0.221 loss_AUX: 0.499 loss_D: 2.205 acc_real: 0.987 acc_fake: 0.208 acc_grfake: 0.867 
running validation set (B:651)
validation accuracies:
                gf: 0.89
                real: 0.98
                fake: 0.27

(epoch: 3, batches: 200, time: 0.025, data: 0.022) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.166 loss_D_fake: 1.510 loss_D_gr_fake: 0.268 loss_AUX: 0.501 loss_D: 2.445 acc_real: 0.968 acc_fake: 0.318 acc_grfake: 0.882 
(epoch: 3, batches: 220, time: 0.023, data: 0.022) loss_G_comp: 0.727 loss_G_anti_sc: 0.425 loss_G: 1.152 loss_D_real: 0.185 loss_D_fake: 1.386 loss_D_gr_fake: 0.193 loss_AUX: 0.500 loss_D: 2.264 acc_real: 0.968 acc_fake: 0.318 acc_grfake: 0.882 
running validation set (B:701)
validation accuracies:
                gf: 0.89
                real: 0.97
                fake: 0.30

learning rate 0.0000800 -> 0.0000800
End of epoch 3 / 3 	 Time Taken: 1221 sec
Finished training, model is saved
